start_trip_counts <- trips_data_fts %>% group_by(start_rental_zone_hal_id) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
start_trip_counts
# count of end station
end_trip_counts <- trips_data_fts %>% group_by(end_rental_zone_hal_id) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
end_trip_counts
# count of roundtrips
trips_data_fts %>%
group_by(roundtrip) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
# histogram on trip length
mw_timediff_mins <- signif(mean(as.numeric(trips_data_fts$timediff_mins)), digits = 6)
brks <- c(3,10,30,60,90,120,150,300)
trips_data_fts %>%
ggplot(aes(as.numeric(timediff_mins))) +
geom_histogram(bins = 200) +
geom_vline(xintercept = 30, col="black", lty="dashed") +
annotate("text", x = 30-1.5, y = 450, col="black", label="First 30 mins are free of charge", angle = 90) +
geom_vline(xintercept = mw_timediff_mins, col="red") +
annotate("text", x = mw_timediff_mins-1.5, y = 350, col="red", label="Mean TimeDiff per Trip", angle = 90) +
labs(title = paste0("Majority of trips are free of charge and mean trip duration is ", mw_timediff_mins, dig=2)) +
scale_x_log10(name ="log trip duration [mins]", labels =  as.character(brks), breaks = brks) +
scale_y_continuous(n.breaks = 10)
# proportion of trips with duration smaller than mean trip duration
trips_data_fts %>%
mutate(smaller_mw = timediff_mins <= mw_timediff_mins) %>%
group_by(smaller_mw) %>%
summarize(n = n()) %>%
mutate(freq = n / sum(n))
# proportion of trips with duration smaller 30 mins
trips_data_fts %>%
mutate(smaller_30 = as.numeric(timediff_mins) <= 30) %>%
group_by(smaller_30) %>%
summarize(n = n()) %>%
mutate(freq = n / sum(n))
# count of trip-starts as per day and per time of day
starts_by_date <- trips_data_fts %>%
group_by(date_from, time_of_day_start) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(date_from) %>%
mutate(freq = n/sum(n))
starts_by_date
starts_by_date %>%
ggplot(aes(x = as.POSIXct(date_from), y = n, group = time_of_day_start, col = time_of_day_start)) +
geom_line() +
scale_x_datetime(name = "Start Date", date_breaks = "day", date_labels = "%Y-%m-%d (%a)") +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_y_continuous(breaks = seq(0,3500, by = 500))
duration_by_date <-  trips_data_fts %>%
group_by(date_from, time_of_day_start) %>%
summarise(mean_duration = as.numeric(mean(timediff_mins)),
sd_duration = as.numeric(sd(timediff_mins))) %>%
ungroup()
duration_by_date
duration_by_date %>%
ggplot(aes(x = as.POSIXct(date_from), y = mean_duration, group = time_of_day_start, col = time_of_day_start)) +
geom_errorbar(aes(ymin=mean_duration-sd_duration, ymax=mean_duration+sd_duration), width=.1) +
geom_line() +
geom_point() +
scale_x_datetime(name = "Start Date", date_breaks = "day", date_labels = "%Y-%m-%d (%a)") +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
labs(title = "mean duration of trips as per start date and time of day")
## TODO: explore rides by grouping them using start_rental_zone/end_rental_zone and not station ids
trips_data_fts %>% select(city_rental_zone) %>% table()
# wieviele solche unterschiedlicher zonen gibt es, wie verteilen sich die trips darauf, die Kunden, wie verteilen sich die end_rental_zones (vllt sogar matrix?!)
# remove Islands in Nationalpark Hamburgisches Wattenmeer in the North Sea
hamburg_districts <- hamburg_districts_full[hamburg_districts_full$Stadtteil != "Neuwerk",]
n_boroughs <- length(unique(hamburg_districts@data$Bezirk))
# borough_colours <- colorRampPalette(blues9)(n_boroughs+1)
borough_colours <- rainbow(n_boroughs)
# leaflet(hamburg_districts) %>% addTiles() %>% addPolygons(weight = 1, color = "#444444", fill = FALSE )
map_hamburg <- leaflet() %>% addTiles()
n_districts <- length(hamburg_districts)
for(i in 1:n_districts){
bezirk_name = hamburg_districts@data$Bezirk_Nam[i]
stadtteil =  hamburg_districts@data$Stadtteil[i]
borough_polygon = sp::SpatialPolygons(hamburg_districts@polygons[i])
borough_colour = borough_colours[hamburg_districts@data$Bezirk[i]]
popup_txt = paste("Bezirk:", bezirk_name, "<br>",
"Stadtteil:",stadtteil)
map_hamburg <- map_hamburg %>%
addPolygons(data = borough_polygon,
color = borough_colour,
weight = 2,
fillColor = "#444444",
fillOpacity = .2,
popup = popup_txt)
}
map_hamburg
start_trip_counts_latlon <- merge(start_trip_counts, stations_data, by.x = "start_rental_zone_hal_id", by.y = "station_id") %>%
mutate(rental_zone_id = start_rental_zone_hal_id, group = "Departure") %>%
select(-start_rental_zone_hal_id)
end_trip_counts_latlon <- merge(end_trip_counts, stations_data, by.x = "end_rental_zone_hal_id", by.y = "station_id") %>%
mutate(rental_zone_id = end_rental_zone_hal_id, group = "Arrival") %>%
select(-end_rental_zone_hal_id)
df_station_counts <- rbind(start_trip_counts_latlon, end_trip_counts_latlon)
# color mapping
# pie(rep(1:12), col=rainbow(12))
cols <- c(1,9)
factpal <- colorFactor(rainbow(12)[cols], df_station_counts$group)
m <- leaflet() %>%
addTiles() %>%
addPolygons(data = hamburg_districts, weight = 2,
color = "#444444", fillColor = "#444444", fillOpacity = .2,
popup = paste("Bezirk:", ~bezirk_name, "<br>", "Stadtteil:", ~stadtteil)) %>%
addCircles(lng = ~lon, lat = ~lat, radius = ~sqrt(n)*10,
group = ~group, color = ~factpal(group),
popup = ~name, weight = 1,
data = df_station_counts) %>%
addLayersControl(
baseGroups = c("Departure", "Arrival"),
options = layersControlOptions(collapsed = TRUE))
m
trips_df <- trips_data_fts %>%
group_by(start_rental_zone_hal_id, end_rental_zone_hal_id) %>%
summarise(n_trips = n()
, n_dist_customer = n_distinct(customer_hal_id)
, mean_duration = mean(timediff_mins)
, sd_duration = sd(timediff_mins)
, mean_speed = mean(speed)
, sd_speed = sd(speed)
, mean_distance = mean(distance_meters)
, sd_distance = sd(distance_meters)
) %>%
ungroup() %>%
mutate(freq_trips = n_trips / sum(n_trips),
freq_dist_customer = n_dist_customer / sum(n_dist_customer),
trips_per_customer = n_trips / n_dist_customer)
trips_lonlat <- merge(trips_df, stations_data,
by.x = "start_rental_zone_hal_id", by.y = "station_id") %>%
rename(start_name = name, start_lat = lat, start_lon = lon) %>%
merge(x = ., stations_data,
by.x = "end_rental_zone_hal_id", by.y = "station_id") %>%
rename(end_name = name, end_lat = lat, end_lon = lon) %>%
mutate(distance_meters = get_dist(start_lon, start_lat, end_lon, end_lat))
trips_lonlat$route_id <- 1:nrow(trips_lonlat)
trips_lonlat %>% arrange(desc(n_trips))
ftr_list <- c("name_start_station", "name_end_station", "datetime_from", "datetime_to", "timediff_mins", "distance_meters", "speed",  "time_of_day_start", "time_of_day_end")
# trip with max speed
trips_data_fts %>% filter(speed == max(speed)) %>% select(all_of(ftr_list))
# trip with largest distance
trips_data_fts %>% filter(distance_meters == max(distance_meters)) %>% select(all_of(ftr_list))
# trip with longest duration
trips_data_fts %>% filter(timediff_mins == max(timediff_mins)) %>% select(all_of(ftr_list))
# routes with most trips (direction is distinguished)
trips_lonlat %>% arrange(desc(n_trips)) %>% head(n=5)
# routes used by largest amount of customers
trips_lonlat %>% arrange(desc(n_dist_customer)) %>% head(n=5)
# routes with largest avg. travel duration beyond all routes with at least 10 trips
trips_lonlat %>% filter(n_trips > 10) %>% arrange(desc(mean_duration)) %>% head(n=5)
# routes with highest average speed (high-speed lines) beyond all routes with at least 10 trips
trips_lonlat %>% filter(n_trips > 10) %>% arrange(desc(mean_speed)) %>% head(n=5)
lb <- 15
trips_lonlat_vis <- trips_lonlat %>% arrange(desc(n_trips)) %>% filter(n_trips >= lb)
m1 <- leaflet(trips_lonlat_vis) %>%
addTiles() %>%
addPolygons(data = hamburg_districts, weight = 2,
color = "#444444", fillColor = "#444444", fillOpacity = .2,
popup = paste("Bezirk:", ~bezirk_name, "<br>", "Stadtteil:", ~stadtteil))
for(i in 1:nrow(trips_lonlat_vis)){
popup_txt =  paste("Station (Departure):", trips_lonlat_vis[i,"start_name"], "<br>",
"Station (Arrival):", trips_lonlat_vis[i,"end_name"], "<br>",
"Number of Trips:", trips_lonlat_vis[i,"n_trips"], "<br>",
"Freq of Trips:", trips_lonlat_vis[i,"freq_trips"], "<br>",
"Number of customers:", trips_lonlat_vis[i,"n_dist_customer"], "<br>",
"Freq of Customers", trips_lonlat_vis[i,"freq_dist_customer"], "<br>",
"Mean Duration:", trips_lonlat_vis[i,"mw_duration"], "<br>",
"Trips per Customer:", trips_lonlat_vis[i,"trips_per_customer"], "<br>")
m1 <- m1 %>%
addPolylines(data = trips_lonlat_vis[i,],
lng = ~ c(start_lon, end_lon),
lat = ~ c(start_lat, end_lat),
popup = popup_txt,
weight = ~sqrt(n_trips-lb+1)*0.5)
}
m1
## Further ideas:
## TODO: identify all return trips (self join, end_station_trip_x = start_station_trip_y, customer_id_trip_x = customer_id_trip_y, start_time_trip_x < start_time_trip_y) -> count all around-trips that lie ~4 or ~8 hours apart (rides of working people), that have start_time in the evening/night (rides of people in spare time). To seperate between locals and tourists residential areas should be identified and used to filter.
## TODO: identify 10 most popular hotspots in Hamburg (get coordinates), identify all routes heading to those hotspots => get descriptives (proportion of people heading to hotspot x etc.)
## TODO: get coordinates of the center of all routes, identify all routes heading to center and away of it => proportion of trips heading to/away from city center and proportion that head into another direction
## TODO: count unique connections i.e. remove direction of trips and add additional visualization
## TODO: get min distance between two arbitrary stations
## TODO: mine osm data
trips_data_fts %>% str()
## TODO: explore rides by grouping them using start_rental_zone/end_rental_zone and not station ids
trips_data_fts %>%
ggplot() %>%
geom_mosaic(aes(x=bezirk_name_start_station, y=bezirk_name_end_station))
install.packages("ggmosaic")
## TODO: explore rides by grouping them using start_rental_zone/end_rental_zone and not station ids
require(ggmosaic)
trips_data_fts %>%
ggplot() %>%
geom_mosaic(aes(x=bezirk_name_start_station, y=bezirk_name_end_station))
## TODO: explore rides by grouping them using start_rental_zone/end_rental_zone and not station ids
require(ggmosaic)
trips_data_fts %>%
ggplot() +
geom_mosaic(aes(x=bezirk_name_start_station, y=bezirk_name_end_station))
## TODO: explore rides by grouping them using start_rental_zone/end_rental_zone and not station ids
require(ggmosaic)
ggplot(dta = trips_data_fts) +  geom_mosaic(aes(x=bezirk_name_start_station, y=bezirk_name_end_station))
## TODO: explore rides by grouping them using start_rental_zone/end_rental_zone and not station ids
require(ggmosaic)
ggplot(dta = trips_data_fts) + geom_mosaic(aes(x=product(bezirk_name_start_station, bezirk_name_end_station)))
trips_data_fts %>% group_by(bezirk_name_start_station, bezirk_name_end_station) %>%
summarise(n = n())
trips_data_fts %>% group_by(bezirk_name_start_station, bezirk_name_end_station) %>%
summarise(n = n()) %>% arrange(desc(n))
ggplot(dta = trips_data_fts) + geom_mosaic(aes(x=product(bezirk_name_start_station, bezirk_name_end_station)))
ggplot(dta = trips_data_fts) + geom_mosaic(aes(x=product(bezirk_name_start_station)))
ggplot(data = trips_data_fts) + geom_mosaic(aes(x=product(bezirk_name_start_station)))
ggplot(data = trips_data_fts) + geom_mosaic(aes(x=product(bezirk_name_start_station, bezirk_name_end_station)))
ggplot(data = trips_data_fts) + geom_mosaic(aes(x=product(bezirk_name_start_station, bezirk_name_end_station),
fill=bezirk_name_start_station))
ggplot(data = trips_data_fts) + geom_mosaic(aes(x=product(bezirk_name_start_station, bezirk_name_end_station),
fill=bezirk_name_start_station, na.rm=TRUE))
ggplot(data = trips_data_fts) + geom_mosaic(aes(x=product(bezirk_name_start_station, bezirk_name_end_station),
fill=bezirk_name_start_station), na.rm=TRUE)
install.packages("vcd")
require(vcd)
district_counts <- trips_data_fts %>%
group_by(bezirk_name_start_station, bezirk_name_end_station) %>%
summarise(n = n()) %>% arrange(desc(n))
mosaic(data=district_counts, shade = TRUE, legend=TRUE)
mosaic(~ n, data=district_counts, shade = TRUE, legend=TRUE)
mosaic(~ bezirk_name_start_station + bezirk_end_start_station, data=trips_data_fts, shade = TRUE, legend=TRUE)
mosaic(~ bezirk_name_start_station + bezirk_name_end_station, data=trips_data_fts, shade = TRUE, legend=TRUE)
ggplot(district_counts, aes(bezirk_name_start_station, bezirk_name_end_station,
col=n, fill=n, label=n)) +
geom_tile()
ggplot(district_counts, aes(bezirk_name_start_station, bezirk_name_end_station,
col=n, fill=n, label=n)) +
geom_tile() +
geom_text(col="black") +
theme_minimal()
district_counts %>% filter(is.na(n))
district_counts
complete.cases(district_counts)
drop_na(district_counts)
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
col=n, fill=n, label=n)) +
geom_tile() +
geom_text(col="black") +
theme_minimal()
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
col=n, fill=n, label=n)) +
geom_tile() +
geom_text(col="white") +
theme_minimal()
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
col=log(n), fill=log10(n), label=n)) +
geom_tile() +
geom_text(col="white") +
theme_minimal()
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
col=n, fill=n, label=n)) +
geom_tile() +
geom_text(col="white") +
theme_minimal()
my_breaks = c(10, 50, 100, 500, 1000, 5000,010000, 20000)
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
col=n, fill=n, label=n)) +
geom_tile() +
geom_text(col="white") +
theme_minimal() +
scale_fill_gradient(name="count", trans="log", breaks = my_breaks, labels=my_breaks)
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
# col=n, fill=n, label=n
)) +
geom_tile() +
geom_text(col="white") +
theme_minimal() +
scale_fill_gradient(name="count", trans="log", breaks = my_breaks, labels=my_breaks)
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
label=n#, col=n, fill=n
)) +
geom_tile() +
geom_text(col="white") +
theme_minimal() +
scale_fill_gradient(name="count", trans="log", breaks = my_breaks, labels=my_breaks)
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
label=n, fill=n#, fill=n
)) +
geom_tile() +
geom_text(col="white") +
theme_minimal() +
scale_fill_gradient(name="count", trans="log", breaks = my_breaks, labels=my_breaks)
my_breaks = c(50, 100, 500, 1000, 5000,010000, 20000)
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
label=n, fill=n#, fill=n
)) +
geom_tile() +
geom_text(col="white") +
theme_minimal() +
scale_fill_gradient(name="count", trans="log", breaks = my_breaks, labels=my_breaks)
my_breaks = c(10, 100, 1000, 10000, 20000)
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
label=n, fill=n#, fill=n
)) +
geom_tile() +
geom_text(col="white") +
theme_minimal() +
scale_fill_gradient(name="count", trans="log", breaks = my_breaks, labels=my_breaks)
my_breaks = c(10, 100, 1000, 10000, 50000)
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
label=n, fill=n#, fill=n
)) +
geom_tile() +
geom_text(col="white") +
theme_minimal() +
scale_fill_gradient(name="count", trans="log", breaks = my_breaks, labels=my_breaks)
library(viridis)
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
label=n, fill=n#, fill=n
)) +
geom_tile() +
geom_text(col="white") +
theme_minimal() +
scale_fill_gradient(name="count", trans="log", breaks = my_breaks, labels=my_breaks) +
scale_fill_viridis(discrete = TRUE)
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
label=n, fill=n#, fill=n
)) +
geom_tile() +
geom_text(col="white") +
theme_minimal() +
# scale_fill_gradient(name="count", trans="log", breaks = my_breaks, labels=my_breaks) +
scale_fill_viridis(name="count", trans="log", breaks = my_breaks, labels=my_breaks)
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
label=n, fill=n#, fill=n
)) +
geom_tile() +
geom_text(col="white") +
theme_minimal() +
# scale_fill_gradient(name="count", trans="log", breaks = my_breaks, labels=my_breaks) +
scale_fill_viridis(name="count", trans="log", breaks = my_breaks, labels=my_breaks) +
theme(axis.text.x = element_text(angle = 45))
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
label=n, fill=n#, fill=n
)) +
geom_tile() +
geom_text(col="white") +
theme_minimal() +
# scale_fill_gradient(name="count", trans="log", breaks = my_breaks, labels=my_breaks) +
scale_fill_viridis(name="count", trans="log", breaks = my_breaks, labels=my_breaks) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
district_counts <- trips_data_fts %>%
group_by(bezirk_name_start_station, bezirk_name_end_station) %>%
summarise(n = n()) %>% arrange(desc(n))
ggplot(data = trips_data_fts) + geom_mosaic(aes(x=product(bezirk_name_start_station, bezirk_name_end_station),
fill=bezirk_name_start_station), na.rm=TRUE)
table(trips_data_fts$bezirk_name_start_station, trips_data_fts$bezirk_name_end_station)
mosaicplot(table(trips_data_fts$bezirk_name_start_station, trips_data_fts$bezirk_name_end_station))
mosaicplot(table(trips_data_fts$stadtteil_start_station, trips_data_fts$stadtteil_end_station))
table(trips_data_fts$stadtteil_start_station, trips_data_fts$stadtteil_end_station)
district_counts <- trips_data_fts %>%
group_by(bezirk_name_start_station, bezirk_name_end_station, .drop=FALSE) %>%
summarise(n = n()) %>% arrange(desc(n))
district_counts
district_counts <- trips_data_fts %>%
group_by(bezirk_name_start_station, bezirk_name_end_station, .drop=TRUE) %>%
summarise(n = n()) %>% arrange(desc(n))
district_counts
mosaicplot(tbl_stadtteile)
tbl_stadtteile <- table(trips_data_fts$stadtteil_start_station, trips_data_fts$stadtteil_end_station)
mosaicplot(tbl_stadtteile)
district_counts_stadtteile <- trips_data_fts %>%
group_by(stadtteil_start_station, stadtteil_end_station) %>%
summarise(n = n()) %>% arrange(desc(n))
district_counts_stadtteile
ggplot(drop_na(district_counts_stadtteile),
aes(bezirk_name_start_station, bezirk_name_end_station,
label=n, fill=n)) +
geom_tile() +
geom_text(col="white") +
theme_minimal()
district_counts_stadtteile
ggplot(drop_na(district_counts_stadtteile),
aes(stadtteil_start_station, stadtteil_end_station,
label=n, fill=n)) +
geom_tile() +
geom_text(col="white") +
theme_minimal()
ggplot(drop_na(district_counts_stadtteile),
aes(stadtteil_start_station, stadtteil_end_station,
label=n, fill=n)) +
geom_tile() +
#geom_text(col="white") +
theme_minimal()
ggplot(drop_na(district_counts_stadtteile),
aes(stadtteil_start_station, stadtteil_end_station,
label=n, fill=n)) +
geom_tile() +
#geom_text(col="white") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust=1))
my_breaks = c(10, 100, 1000, 10000)
ggplot(drop_na(district_counts_stadtteile),
aes(stadtteil_start_station, stadtteil_end_station,
label=n, fill=n)) +
geom_tile() +
#geom_text(col="white") +
theme_minimal() +
scale_fill_viridis(name="count", trans="log", breaks = my_breaks, labels=my_breaks) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggplot(drop_na(district_counts_stadtteile),
aes(stadtteil_start_station, stadtteil_end_station,
label=n, fill=n)) +
geom_tile() +
#geom_text(col="white") +
theme_minimal() +
scale_fill_viridis(name="count", trans="sqrt", breaks = my_breaks, labels=my_breaks) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggplot(drop_na(district_counts_stadtteile),
aes(stadtteil_start_station, stadtteil_end_station,
label=n, fill=n)) +
geom_tile() +
#geom_text(col="white") +
theme_minimal() +
scale_fill_viridis(name="count", trans="sqrt", breaks = my_breaks, labels=my_breaks) +
theme(axis.text.x = element_text(angle = 60, hjust=1))
ggplot(drop_na(district_counts_stadtteile),
aes(stadtteil_start_station, stadtteil_end_station,
label=n, fill=n)) +
geom_tile() +
#geom_text(col="white") +
theme_minimal() +
scale_fill_viridis(name="count", breaks = my_breaks, labels=my_breaks) +
theme(axis.text.x = element_text(angle = 60, hjust=1))
, trans="sqrt"
ggplot(drop_na(district_counts_stadtteile),
aes(stadtteil_start_station, stadtteil_end_station,
label=n, fill=n)) +
geom_tile() +
#geom_text(col="white") +
theme_minimal() +
scale_fill_viridis(name="count", trans="sqrt", breaks = my_breaks, labels=my_breaks) +
theme(axis.text.x = element_text(angle = 60, hjust=1))
ggplot(drop_na(district_counts_stadtteile),
aes(stadtteil_start_station, stadtteil_end_station,
label=n, fill=n)) +
geom_tile() +
#geom_text(col="white") +
theme_minimal() +
scale_fill_viridis(name="count", trans="log", breaks = my_breaks, labels=my_breaks) +
theme(axis.text.x = element_text(angle = 60, hjust=1))
my_breaks = c(10, 100, 1000, 5000)
ggplot(drop_na(district_counts_stadtteile),
aes(stadtteil_start_station, stadtteil_end_station,
label=n, fill=n)) +
geom_tile() +
#geom_text(col="white") +
theme_minimal() +
scale_fill_viridis(name="count", trans="log", breaks = my_breaks, labels=my_breaks) +
theme(axis.text.x = element_text(angle = 60, hjust=1))
## TODO: explore rides by grouping them using start_rental_zone/end_rental_zone and not station ids
require(ggmosaic)
trips_data_fts %>% group_by(bezirk_name_start_station, bezirk_name_end_station) %>%
summarise(n = n()) %>% arrange(desc(n))
ggplot(data = trips_data_fts) + geom_mosaic(aes(x=product(bezirk_name_start_station, bezirk_name_end_station),
fill=bezirk_name_start_station), na.rm=TRUE)
print(table(trips_data_fts$bezirk_name_start_station, trips_data_fts$bezirk_name_end_station))
district_counts <- trips_data_fts %>%
group_by(bezirk_name_start_station, bezirk_name_end_station) %>%
summarise(n = n()) %>% arrange(desc(n))
library(viridis)
my_breaks = c(10, 100, 1000, 10000, 50000)
ggplot(drop_na(district_counts),
aes(bezirk_name_start_station, bezirk_name_end_station,
label=n, fill=n)) +
geom_tile() +
geom_text(col="white") +
theme_minimal() +
# scale_fill_gradient(name="count", trans="log", breaks = my_breaks, labels=my_breaks) +
scale_fill_viridis(name="count", trans="log", breaks = my_breaks, labels=my_breaks) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
tbl_stadtteile <- table(trips_data_fts$stadtteil_start_station, trips_data_fts$stadtteil_end_station)
mosaicplot(tbl_stadtteile)
district_counts_stadtteile <- trips_data_fts %>%
group_by(stadtteil_start_station, stadtteil_end_station) %>%
summarise(n = n()) %>% arrange(desc(n))
my_breaks = c(10, 100, 1000, 5000)
ggplot(drop_na(district_counts_stadtteile),
aes(stadtteil_start_station, stadtteil_end_station,
label=n, fill=n)) +
geom_tile() +
#geom_text(col="white") +
theme_minimal() +
scale_fill_viridis(name="count", trans="log", breaks = my_breaks, labels=my_breaks) +
theme(axis.text.x = element_text(angle = 60, hjust=1))
# wieviele solche unterschiedlicher zonen gibt es, wie verteilen sich die trips darauf, die Kunden, wie verteilen sich die end_rental_zones (vllt sogar matrix?!)
